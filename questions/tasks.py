import functools
import os
from random import randint

from celery import shared_task, current_task
from django.db import models

from questions.models import Question


def retry_on_failure(model):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ `id` –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        model (models.Model): Django-–º–æ–¥–µ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å `attempts`
    """
    
    def decorator(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞ –∑–∞–¥–∞—á–∏"""
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            id_ = kwargs.get("id", args[0] if args else None)
            if id_ is None:
                raise ValueError(
                    "‚ùå –û—à–∏–±–∫–∞: id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (id=...) –∏–ª–∏ –ø–µ—Ä–≤—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º."
                )
            try:
                res = func(*args, **kwargs)
            except Exception as e:
                model.objects.filter(id=id_).update(attempts=models.F("attempts") + 1)
                raise
            return res
        return wrapper
    
    return decorator

@shared_task(name="play_sound_task", acks_late=True)
@retry_on_failure(model=Question)
# @transaction.atomic
def play_sound_task(id_):
    os.system("paplay /usr/share/sounds/freedesktop/stereo/message.oga")  # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ –≤ Ubuntu
    n = randint(1, 2)
    # if n == 1:
    current_task.apply_async(args=[id_], countdown=5)
    # raise ValueError
    # """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ–±—è 3 —Ä–∞–∑–∞"""
    # print(f"üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É —Å–∏–≥–Ω–∞–ª...{id_} {iteration} {max_iterations}")
    #
    # if iteration < max_iterations:
    #     play_sound_task.apply_async(args=[id_, iteration + 1, max_iterations], countdown=5)
    # else:
    #     print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤!")
    #     # raise MaxRetriesExceededError
    
    # return "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!"
